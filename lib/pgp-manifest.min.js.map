{"version":3,"sources":["pgp-manifest.min.js","node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index.js","node_modules/semver/semver.browser.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","semver","valid","manifest","version","console","log","parts","_step","foundBody","undefined","_iterator","Symbol","iterator","next","done","part","value","id","hash","parse","input","JSON","write","stringify",2,"loose","re","LOOSE","FULL","test","SemVer","v","clean","trim","replace","TypeError","this","m","match","raw","major","minor","patch","prerelease","split","map","build","format","inc","release","identifier","er","diff","version1","version2","eq","v1","v2","key","compareIdentifiers","b","anum","numeric","bnum","rcompareIdentifiers","compare","compareLoose","rcompare","sort","list","rsort","gt","lt","neq","gte","lte","cmp","op","ret","Comparator","comp","ANY","operator","Range","range","set","parseRange","filter","c","toComparators","join","parseComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","toLowerCase","replaceTilde","TILDELOOSE","TILDE","_","M","p","pr","charAt","replaceCaret","CARETLOOSE","CARET","replaceXRange","XRANGELOOSE","XRANGE","gtlt","xM","xm","xp","anyX","STAR","hyphenReplace","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","testSet","allowed","satisfies","maxSatisfying","versions","validRange","ltr","outside","gtr","hilo","gtfn","ltefn","ltfn","ecomp","comparators","high","low","forEach","comparator","SEMVER_SPEC_VERSION","src","R","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","MAINVERSION","MAINVERSIONLOOSE","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","PRERELEASE","PRERELEASELOOSE","BUILDIDENTIFIER","BUILD","FULLPLAIN","LOOSEPLAIN","GTLT","XRANGEIDENTIFIERLOOSE","XRANGEIDENTIFIER","XRANGEPLAIN","XRANGEPLAINLOOSE","LONETILDE","TILDETRIM","RegExp","tildeTrimReplace","LONECARET","CARETTRIM","caretTrimReplace","COMPARATORLOOSE","COMPARATOR","COMPARATORTRIM","comparatorTrimReplace","HYPHENRANGE","HYPHENRANGELOOSE","prototype","inspect","toString","other","compareMain","comparePre","push","isNaN","comps","hr","compRe","define","amd"],"mappings":"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","file":"pgp-manifest.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\r\n\r\nvar semver = require(\"semver\");\r\n\r\nexports.valid = function(manifest) {\r\n\t// Check if version is here\r\n\tif (!semver.valid(manifest.version)) {\r\n\t\tconsole.log(\"#1\");\r\n\t\treturn false;\r\n\t} \r\n\r\n\t// Check parts contents\r\n\tif (!manifest.parts || manifest.parts.length === 0) {\r\n\t\tconsole.log(\"#2\");\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Check if body is there and verify part contents\r\n\tlet foundBody;\r\n\r\n\tfor (let part of manifest.parts) {\r\n\t\tif (!part.id || !part.hash || !part[\"content-type\"]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (part.id === \"body\") {\r\n\t\t\tfoundBody = true;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!foundBody) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nexports.parse = function(input) {\r\n\t// Parse the manifest\r\n\tlet manifest = JSON.parse(input);\r\n\r\n\t// Validate the manifest\r\n\tif (!exports.valid(manifest)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn manifest;\r\n}\r\n\r\nexports.write = function(manifest) {\r\n\t// Validate the manifest\r\n\tif (!exports.valid(manifest)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Stringify it\r\n\treturn JSON.stringify(manifest);\r\n}\n},{\"semver\":2}],2:[function(require,module,exports){\n;(function(exports) {\n\n// export the class if we are in a Node-like system.\nif (typeof module === 'object' && module.exports === exports)\n  exports = module.exports = SemVer;\n\n// The debug function is excluded entirely from the minified version.\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0';\n\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar R = 0;\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++;\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\nvar NUMERICIDENTIFIERLOOSE = R++;\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\n\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++;\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\n\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++;\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')';\n\nvar MAINVERSIONLOOSE = R++;\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++;\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';\n\nvar PRERELEASEIDENTIFIERLOOSE = R++;\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';\n\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++;\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\n\nvar PRERELEASELOOSE = R++;\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++;\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++;\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\n\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++;\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?';\n\nsrc[FULL] = '^' + FULLPLAIN + '$';\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?';\n\nvar LOOSE = R++;\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';\n\nvar GTLT = R++;\nsrc[GTLT] = '((?:<|>)?=?)';\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++;\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\nvar XRANGEIDENTIFIER = R++;\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\n\nvar XRANGEPLAIN = R++;\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?';\n\nvar XRANGEPLAINLOOSE = R++;\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?';\n\nvar XRANGE = R++;\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\nvar XRANGELOOSE = R++;\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++;\nsrc[LONETILDE] = '(?:~>?)';\n\nvar TILDETRIM = R++;\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\nvar tildeTrimReplace = '$1~';\n\nvar TILDE = R++;\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\nvar TILDELOOSE = R++;\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++;\nsrc[LONECARET] = '(?:\\\\^)';\n\nvar CARETTRIM = R++;\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\nvar caretTrimReplace = '$1^';\n\nvar CARET = R++;\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\nvar CARETLOOSE = R++;\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++;\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\nvar COMPARATOR = R++;\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\n\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++;\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\nvar comparatorTrimReplace = '$1$2$3';\n\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++;\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$';\n\nvar HYPHENRANGELOOSE = R++;\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$';\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++;\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  ;\n  if (!re[i])\n    re[i] = new RegExp(src[i]);\n}\n\nexports.parse = parse;\nfunction parse(version, loose) {\n  var r = loose ? re[LOOSE] : re[FULL];\n  return (r.test(version)) ? new SemVer(version, loose) : null;\n}\n\nexports.valid = valid;\nfunction valid(version, loose) {\n  var v = parse(version, loose);\n  return v ? v.version : null;\n}\n\n\nexports.clean = clean;\nfunction clean(version, loose) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);\n  return s ? s.version : null;\n}\n\nexports.SemVer = SemVer;\n\nfunction SemVer(version, loose) {\n  if (version instanceof SemVer) {\n    if (version.loose === loose)\n      return version;\n    else\n      version = version.version;\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  if (!(this instanceof SemVer))\n    return new SemVer(version, loose);\n\n  ;\n  this.loose = loose;\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\n\n  if (!m)\n    throw new TypeError('Invalid Version: ' + version);\n\n  this.raw = version;\n\n  // these are actually numbers\n  this.major = +m[1];\n  this.minor = +m[2];\n  this.patch = +m[3];\n\n  // numberify any prerelease numeric ids\n  if (!m[4])\n    this.prerelease = [];\n  else\n    this.prerelease = m[4].split('.').map(function(id) {\n      return (/^[0-9]+$/.test(id)) ? +id : id;\n    });\n\n  this.build = m[5] ? m[5].split('.') : [];\n  this.format();\n}\n\nSemVer.prototype.format = function() {\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\n  if (this.prerelease.length)\n    this.version += '-' + this.prerelease.join('.');\n  return this.version;\n};\n\nSemVer.prototype.inspect = function() {\n  return '<SemVer \"' + this + '\">';\n};\n\nSemVer.prototype.toString = function() {\n  return this.version;\n};\n\nSemVer.prototype.compare = function(other) {\n  ;\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return this.compareMain(other) || this.comparePre(other);\n};\n\nSemVer.prototype.compareMain = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch);\n};\n\nSemVer.prototype.comparePre = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length)\n    return -1;\n  else if (!this.prerelease.length && other.prerelease.length)\n    return 1;\n  else if (!this.prerelease.length && !other.prerelease.length)\n    return 0;\n\n  var i = 0;\n  do {\n    var a = this.prerelease[i];\n    var b = other.prerelease[i];\n    ;\n    if (a === undefined && b === undefined)\n      return 0;\n    else if (b === undefined)\n      return 1;\n    else if (a === undefined)\n      return -1;\n    else if (a === b)\n      continue;\n    else\n      return compareIdentifiers(a, b);\n  } while (++i);\n};\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function(release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor = 0;\n      this.major++;\n      this.inc('pre', identifier);\n      break;\n    case 'preminor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor++;\n      this.inc('pre', identifier);\n      break;\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0;\n      this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0)\n        this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)\n        this.major++;\n      this.minor = 0;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0)\n        this.minor++;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0)\n        this.patch++;\n      this.prerelease = [];\n      break;\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0)\n        this.prerelease = [0];\n      else {\n        var i = this.prerelease.length;\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++;\n            i = -2;\n          }\n        }\n        if (i === -1) // didn't increment anything\n          this.prerelease.push(0);\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1]))\n            this.prerelease = [identifier, 0];\n        } else\n          this.prerelease = [identifier, 0];\n      }\n      break;\n\n    default:\n      throw new Error('invalid increment argument: ' + release);\n  }\n  this.format();\n  return this;\n};\n\nexports.inc = inc;\nfunction inc(version, release, loose, identifier) {\n  if (typeof(loose) === 'string') {\n    identifier = loose;\n    loose = undefined;\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version;\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.diff = diff;\nfunction diff(version1, version2) {\n  if (eq(version1, version2)) {\n    return null;\n  } else {\n    var v1 = parse(version1);\n    var v2 = parse(version2);\n    if (v1.prerelease.length || v2.prerelease.length) {\n      for (var key in v1) {\n        if (key === 'major' || key === 'minor' || key === 'patch') {\n          if (v1[key] !== v2[key]) {\n            return 'pre'+key;\n          }\n        }\n      }\n      return 'prerelease';\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return key;\n        }\n      }\n    }\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers;\n\nvar numeric = /^[0-9]+$/;\nfunction compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return (anum && !bnum) ? -1 :\n         (bnum && !anum) ? 1 :\n         a < b ? -1 :\n         a > b ? 1 :\n         0;\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers;\nfunction rcompareIdentifiers(a, b) {\n  return compareIdentifiers(b, a);\n}\n\nexports.major = major;\nfunction major(a, loose) {\n  return new SemVer(a, loose).major;\n}\n\nexports.minor = minor;\nfunction minor(a, loose) {\n  return new SemVer(a, loose).minor;\n}\n\nexports.patch = patch;\nfunction patch(a, loose) {\n  return new SemVer(a, loose).patch;\n}\n\nexports.compare = compare;\nfunction compare(a, b, loose) {\n  return new SemVer(a, loose).compare(b);\n}\n\nexports.compareLoose = compareLoose;\nfunction compareLoose(a, b) {\n  return compare(a, b, true);\n}\n\nexports.rcompare = rcompare;\nfunction rcompare(a, b, loose) {\n  return compare(b, a, loose);\n}\n\nexports.sort = sort;\nfunction sort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.compare(a, b, loose);\n  });\n}\n\nexports.rsort = rsort;\nfunction rsort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.rcompare(a, b, loose);\n  });\n}\n\nexports.gt = gt;\nfunction gt(a, b, loose) {\n  return compare(a, b, loose) > 0;\n}\n\nexports.lt = lt;\nfunction lt(a, b, loose) {\n  return compare(a, b, loose) < 0;\n}\n\nexports.eq = eq;\nfunction eq(a, b, loose) {\n  return compare(a, b, loose) === 0;\n}\n\nexports.neq = neq;\nfunction neq(a, b, loose) {\n  return compare(a, b, loose) !== 0;\n}\n\nexports.gte = gte;\nfunction gte(a, b, loose) {\n  return compare(a, b, loose) >= 0;\n}\n\nexports.lte = lte;\nfunction lte(a, b, loose) {\n  return compare(a, b, loose) <= 0;\n}\n\nexports.cmp = cmp;\nfunction cmp(a, op, b, loose) {\n  var ret;\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a === b;\n      break;\n    case '!==':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a !== b;\n      break;\n    case '': case '=': case '==': ret = eq(a, b, loose); break;\n    case '!=': ret = neq(a, b, loose); break;\n    case '>': ret = gt(a, b, loose); break;\n    case '>=': ret = gte(a, b, loose); break;\n    case '<': ret = lt(a, b, loose); break;\n    case '<=': ret = lte(a, b, loose); break;\n    default: throw new TypeError('Invalid operator: ' + op);\n  }\n  return ret;\n}\n\nexports.Comparator = Comparator;\nfunction Comparator(comp, loose) {\n  if (comp instanceof Comparator) {\n    if (comp.loose === loose)\n      return comp;\n    else\n      comp = comp.value;\n  }\n\n  if (!(this instanceof Comparator))\n    return new Comparator(comp, loose);\n\n  ;\n  this.loose = loose;\n  this.parse(comp);\n\n  if (this.semver === ANY)\n    this.value = '';\n  else\n    this.value = this.operator + this.semver.version;\n\n  ;\n}\n\nvar ANY = {};\nComparator.prototype.parse = function(comp) {\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var m = comp.match(r);\n\n  if (!m)\n    throw new TypeError('Invalid comparator: ' + comp);\n\n  this.operator = m[1];\n  if (this.operator === '=')\n    this.operator = '';\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2])\n    this.semver = ANY;\n  else\n    this.semver = new SemVer(m[2], this.loose);\n};\n\nComparator.prototype.inspect = function() {\n  return '<SemVer Comparator \"' + this + '\">';\n};\n\nComparator.prototype.toString = function() {\n  return this.value;\n};\n\nComparator.prototype.test = function(version) {\n  ;\n\n  if (this.semver === ANY)\n    return true;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  return cmp(version, this.operator, this.semver, this.loose);\n};\n\n\nexports.Range = Range;\nfunction Range(range, loose) {\n  if ((range instanceof Range) && range.loose === loose)\n    return range;\n\n  if (!(this instanceof Range))\n    return new Range(range, loose);\n\n  this.loose = loose;\n\n  // First, split based on boolean or ||\n  this.raw = range;\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\n    return this.parseRange(range.trim());\n  }, this).filter(function(c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length;\n  });\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range);\n  }\n\n  this.format();\n}\n\nRange.prototype.inspect = function() {\n  return '<SemVer Range \"' + this.range + '\">';\n};\n\nRange.prototype.format = function() {\n  this.range = this.set.map(function(comps) {\n    return comps.join(' ').trim();\n  }).join('||').trim();\n  return this.range;\n};\n\nRange.prototype.toString = function() {\n  return this.range;\n};\n\nRange.prototype.parseRange = function(range) {\n  var loose = this.loose;\n  range = range.trim();\n  ;\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\n  range = range.replace(hr, hyphenReplace);\n  ;\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\n  ;\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace);\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ');\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var set = range.split(' ').map(function(comp) {\n    return parseComparator(comp, loose);\n  }).join(' ').split(/\\s+/);\n  if (this.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function(comp) {\n      return !!comp.match(compRe);\n    });\n  }\n  set = set.map(function(comp) {\n    return new Comparator(comp, loose);\n  });\n\n  return set;\n};\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators;\nfunction toComparators(range, loose) {\n  return new Range(range, loose).set.map(function(comp) {\n    return comp.map(function(c) {\n      return c.value;\n    }).join(' ').trim().split(' ');\n  });\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator(comp, loose) {\n  ;\n  comp = replaceCarets(comp, loose);\n  ;\n  comp = replaceTildes(comp, loose);\n  ;\n  comp = replaceXRanges(comp, loose);\n  ;\n  comp = replaceStars(comp, loose);\n  ;\n  return comp;\n}\n\nfunction isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceTilde(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceTilde(comp, loose) {\n  var r = loose ? re[TILDELOOSE] : re[TILDE];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    ;\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p))\n      // ~1.2 == >=1.2.0- <1.3.0-\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    else if (pr) {\n      ;\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      ret = '>=' + M + '.' + m + '.' + p + pr +\n            ' <' + M + '.' + (+m + 1) + '.0';\n    } else\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0';\n\n    ;\n    return ret;\n  });\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceCaret(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceCaret(comp, loose) {\n  ;\n  var r = loose ? re[CARETLOOSE] : re[CARET];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    ;\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p)) {\n      if (M === '0')\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      else\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n    } else if (pr) {\n      ;\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p + pr +\n              ' <' + (+M + 1) + '.0.0';\n    } else {\n      ;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0';\n    }\n\n    ;\n    return ret;\n  });\n}\n\nfunction replaceXRanges(comp, loose) {\n  ;\n  return comp.split(/\\s+/).map(function(comp) {\n    return replaceXRange(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceXRange(comp, loose) {\n  comp = comp.trim();\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\n    ;\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX)\n      gtlt = '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // replace X with 0\n      if (xm)\n        m = 0;\n      if (xp)\n        p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else if (xp) {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm)\n          M = +M + 1\n        else\n          m = +m + 1\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p;\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    }\n\n    ;\n\n    return ret;\n  });\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars(comp, loose) {\n  ;\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '');\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace($0,\n                       from, fM, fm, fp, fpr, fb,\n                       to, tM, tm, tp, tpr, tb) {\n\n  if (isX(fM))\n    from = '';\n  else if (isX(fm))\n    from = '>=' + fM + '.0.0';\n  else if (isX(fp))\n    from = '>=' + fM + '.' + fm + '.0';\n  else\n    from = '>=' + from;\n\n  if (isX(tM))\n    to = '';\n  else if (isX(tm))\n    to = '<' + (+tM + 1) + '.0.0';\n  else if (isX(tp))\n    to = '<' + tM + '.' + (+tm + 1) + '.0';\n  else if (tpr)\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n  else\n    to = '<=' + to;\n\n  return (from + ' ' + to).trim();\n}\n\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function(version) {\n  if (!version)\n    return false;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version))\n      return true;\n  }\n  return false;\n};\n\nfunction testSet(set, version) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version))\n      return false;\n  }\n\n  if (version.prerelease.length) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var i = 0; i < set.length; i++) {\n      ;\n      if (set[i].semver === ANY)\n        return true;\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver;\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch)\n          return true;\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n\n  return true;\n}\n\nexports.satisfies = satisfies;\nfunction satisfies(version, range, loose) {\n  try {\n    range = new Range(range, loose);\n  } catch (er) {\n    return false;\n  }\n  return range.test(version);\n}\n\nexports.maxSatisfying = maxSatisfying;\nfunction maxSatisfying(versions, range, loose) {\n  return versions.filter(function(version) {\n    return satisfies(version, range, loose);\n  }).sort(function(a, b) {\n    return rcompare(a, b, loose);\n  })[0] || null;\n}\n\nexports.validRange = validRange;\nfunction validRange(range, loose) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, loose).range || '*';\n  } catch (er) {\n    return null;\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr;\nfunction ltr(version, range, loose) {\n  return outside(version, range, '<', loose);\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr;\nfunction gtr(version, range, loose) {\n  return outside(version, range, '>', loose);\n}\n\nexports.outside = outside;\nfunction outside(version, range, hilo, loose) {\n  version = new SemVer(version, loose);\n  range = new Range(range, loose);\n\n  var gtfn, ltefn, ltfn, comp, ecomp;\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, loose)) {\n    return false;\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n\n    var high = null;\n    var low = null;\n\n    comparators.forEach(function(comparator) {\n      high = high || comparator;\n      low = low || comparator;\n      if (gtfn(comparator.semver, high.semver, loose)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, loose)) {\n        low = comparator;\n      }\n    });\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Use the define() function if we're in AMD land\nif (typeof define === 'function' && define.amd)\n  define(exports);\n\n})(\n  typeof exports === 'object' ? exports :\n  typeof define === 'function' && define.amd ? {} :\n  semver = {}\n);\n\n},{}]},{},[1])\n\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\n\r\nvar semver = require(\"semver\");\r\n\r\nexports.valid = function(manifest) {\r\n\t// Check if version is here\r\n\tif (!semver.valid(manifest.version)) {\r\n\t\tconsole.log(\"#1\");\r\n\t\treturn false;\r\n\t} \r\n\r\n\t// Check parts contents\r\n\tif (!manifest.parts || manifest.parts.length === 0) {\r\n\t\tconsole.log(\"#2\");\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Check if body is there and verify part contents\r\n\tlet foundBody;\r\n\r\n\tfor (let part of manifest.parts) {\r\n\t\tif (!part.id || !part.hash || !part[\"content-type\"]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (part.id === \"body\") {\r\n\t\t\tfoundBody = true;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!foundBody) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nexports.parse = function(input) {\r\n\t// Parse the manifest\r\n\tlet manifest = JSON.parse(input);\r\n\r\n\t// Validate the manifest\r\n\tif (!exports.valid(manifest)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn manifest;\r\n}\r\n\r\nexports.write = function(manifest) {\r\n\t// Validate the manifest\r\n\tif (!exports.valid(manifest)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Stringify it\r\n\treturn JSON.stringify(manifest);\r\n}",";(function(exports) {\n\n// export the class if we are in a Node-like system.\nif (typeof module === 'object' && module.exports === exports)\n  exports = module.exports = SemVer;\n\n// The debug function is excluded entirely from the minified version.\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0';\n\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar R = 0;\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++;\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\nvar NUMERICIDENTIFIERLOOSE = R++;\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\n\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++;\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\n\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++;\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')';\n\nvar MAINVERSIONLOOSE = R++;\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++;\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';\n\nvar PRERELEASEIDENTIFIERLOOSE = R++;\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';\n\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++;\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\n\nvar PRERELEASELOOSE = R++;\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++;\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++;\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\n\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++;\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?';\n\nsrc[FULL] = '^' + FULLPLAIN + '$';\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?';\n\nvar LOOSE = R++;\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';\n\nvar GTLT = R++;\nsrc[GTLT] = '((?:<|>)?=?)';\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++;\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\nvar XRANGEIDENTIFIER = R++;\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\n\nvar XRANGEPLAIN = R++;\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?';\n\nvar XRANGEPLAINLOOSE = R++;\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?';\n\nvar XRANGE = R++;\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\nvar XRANGELOOSE = R++;\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++;\nsrc[LONETILDE] = '(?:~>?)';\n\nvar TILDETRIM = R++;\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\nvar tildeTrimReplace = '$1~';\n\nvar TILDE = R++;\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\nvar TILDELOOSE = R++;\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++;\nsrc[LONECARET] = '(?:\\\\^)';\n\nvar CARETTRIM = R++;\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\nvar caretTrimReplace = '$1^';\n\nvar CARET = R++;\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\nvar CARETLOOSE = R++;\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++;\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\nvar COMPARATOR = R++;\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\n\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++;\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\nvar comparatorTrimReplace = '$1$2$3';\n\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++;\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$';\n\nvar HYPHENRANGELOOSE = R++;\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$';\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++;\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  ;\n  if (!re[i])\n    re[i] = new RegExp(src[i]);\n}\n\nexports.parse = parse;\nfunction parse(version, loose) {\n  var r = loose ? re[LOOSE] : re[FULL];\n  return (r.test(version)) ? new SemVer(version, loose) : null;\n}\n\nexports.valid = valid;\nfunction valid(version, loose) {\n  var v = parse(version, loose);\n  return v ? v.version : null;\n}\n\n\nexports.clean = clean;\nfunction clean(version, loose) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);\n  return s ? s.version : null;\n}\n\nexports.SemVer = SemVer;\n\nfunction SemVer(version, loose) {\n  if (version instanceof SemVer) {\n    if (version.loose === loose)\n      return version;\n    else\n      version = version.version;\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  if (!(this instanceof SemVer))\n    return new SemVer(version, loose);\n\n  ;\n  this.loose = loose;\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\n\n  if (!m)\n    throw new TypeError('Invalid Version: ' + version);\n\n  this.raw = version;\n\n  // these are actually numbers\n  this.major = +m[1];\n  this.minor = +m[2];\n  this.patch = +m[3];\n\n  // numberify any prerelease numeric ids\n  if (!m[4])\n    this.prerelease = [];\n  else\n    this.prerelease = m[4].split('.').map(function(id) {\n      return (/^[0-9]+$/.test(id)) ? +id : id;\n    });\n\n  this.build = m[5] ? m[5].split('.') : [];\n  this.format();\n}\n\nSemVer.prototype.format = function() {\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\n  if (this.prerelease.length)\n    this.version += '-' + this.prerelease.join('.');\n  return this.version;\n};\n\nSemVer.prototype.inspect = function() {\n  return '<SemVer \"' + this + '\">';\n};\n\nSemVer.prototype.toString = function() {\n  return this.version;\n};\n\nSemVer.prototype.compare = function(other) {\n  ;\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return this.compareMain(other) || this.comparePre(other);\n};\n\nSemVer.prototype.compareMain = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch);\n};\n\nSemVer.prototype.comparePre = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length)\n    return -1;\n  else if (!this.prerelease.length && other.prerelease.length)\n    return 1;\n  else if (!this.prerelease.length && !other.prerelease.length)\n    return 0;\n\n  var i = 0;\n  do {\n    var a = this.prerelease[i];\n    var b = other.prerelease[i];\n    ;\n    if (a === undefined && b === undefined)\n      return 0;\n    else if (b === undefined)\n      return 1;\n    else if (a === undefined)\n      return -1;\n    else if (a === b)\n      continue;\n    else\n      return compareIdentifiers(a, b);\n  } while (++i);\n};\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function(release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor = 0;\n      this.major++;\n      this.inc('pre', identifier);\n      break;\n    case 'preminor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor++;\n      this.inc('pre', identifier);\n      break;\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0;\n      this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0)\n        this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)\n        this.major++;\n      this.minor = 0;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0)\n        this.minor++;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0)\n        this.patch++;\n      this.prerelease = [];\n      break;\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0)\n        this.prerelease = [0];\n      else {\n        var i = this.prerelease.length;\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++;\n            i = -2;\n          }\n        }\n        if (i === -1) // didn't increment anything\n          this.prerelease.push(0);\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1]))\n            this.prerelease = [identifier, 0];\n        } else\n          this.prerelease = [identifier, 0];\n      }\n      break;\n\n    default:\n      throw new Error('invalid increment argument: ' + release);\n  }\n  this.format();\n  return this;\n};\n\nexports.inc = inc;\nfunction inc(version, release, loose, identifier) {\n  if (typeof(loose) === 'string') {\n    identifier = loose;\n    loose = undefined;\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version;\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.diff = diff;\nfunction diff(version1, version2) {\n  if (eq(version1, version2)) {\n    return null;\n  } else {\n    var v1 = parse(version1);\n    var v2 = parse(version2);\n    if (v1.prerelease.length || v2.prerelease.length) {\n      for (var key in v1) {\n        if (key === 'major' || key === 'minor' || key === 'patch') {\n          if (v1[key] !== v2[key]) {\n            return 'pre'+key;\n          }\n        }\n      }\n      return 'prerelease';\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return key;\n        }\n      }\n    }\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers;\n\nvar numeric = /^[0-9]+$/;\nfunction compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return (anum && !bnum) ? -1 :\n         (bnum && !anum) ? 1 :\n         a < b ? -1 :\n         a > b ? 1 :\n         0;\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers;\nfunction rcompareIdentifiers(a, b) {\n  return compareIdentifiers(b, a);\n}\n\nexports.major = major;\nfunction major(a, loose) {\n  return new SemVer(a, loose).major;\n}\n\nexports.minor = minor;\nfunction minor(a, loose) {\n  return new SemVer(a, loose).minor;\n}\n\nexports.patch = patch;\nfunction patch(a, loose) {\n  return new SemVer(a, loose).patch;\n}\n\nexports.compare = compare;\nfunction compare(a, b, loose) {\n  return new SemVer(a, loose).compare(b);\n}\n\nexports.compareLoose = compareLoose;\nfunction compareLoose(a, b) {\n  return compare(a, b, true);\n}\n\nexports.rcompare = rcompare;\nfunction rcompare(a, b, loose) {\n  return compare(b, a, loose);\n}\n\nexports.sort = sort;\nfunction sort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.compare(a, b, loose);\n  });\n}\n\nexports.rsort = rsort;\nfunction rsort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.rcompare(a, b, loose);\n  });\n}\n\nexports.gt = gt;\nfunction gt(a, b, loose) {\n  return compare(a, b, loose) > 0;\n}\n\nexports.lt = lt;\nfunction lt(a, b, loose) {\n  return compare(a, b, loose) < 0;\n}\n\nexports.eq = eq;\nfunction eq(a, b, loose) {\n  return compare(a, b, loose) === 0;\n}\n\nexports.neq = neq;\nfunction neq(a, b, loose) {\n  return compare(a, b, loose) !== 0;\n}\n\nexports.gte = gte;\nfunction gte(a, b, loose) {\n  return compare(a, b, loose) >= 0;\n}\n\nexports.lte = lte;\nfunction lte(a, b, loose) {\n  return compare(a, b, loose) <= 0;\n}\n\nexports.cmp = cmp;\nfunction cmp(a, op, b, loose) {\n  var ret;\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a === b;\n      break;\n    case '!==':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a !== b;\n      break;\n    case '': case '=': case '==': ret = eq(a, b, loose); break;\n    case '!=': ret = neq(a, b, loose); break;\n    case '>': ret = gt(a, b, loose); break;\n    case '>=': ret = gte(a, b, loose); break;\n    case '<': ret = lt(a, b, loose); break;\n    case '<=': ret = lte(a, b, loose); break;\n    default: throw new TypeError('Invalid operator: ' + op);\n  }\n  return ret;\n}\n\nexports.Comparator = Comparator;\nfunction Comparator(comp, loose) {\n  if (comp instanceof Comparator) {\n    if (comp.loose === loose)\n      return comp;\n    else\n      comp = comp.value;\n  }\n\n  if (!(this instanceof Comparator))\n    return new Comparator(comp, loose);\n\n  ;\n  this.loose = loose;\n  this.parse(comp);\n\n  if (this.semver === ANY)\n    this.value = '';\n  else\n    this.value = this.operator + this.semver.version;\n\n  ;\n}\n\nvar ANY = {};\nComparator.prototype.parse = function(comp) {\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var m = comp.match(r);\n\n  if (!m)\n    throw new TypeError('Invalid comparator: ' + comp);\n\n  this.operator = m[1];\n  if (this.operator === '=')\n    this.operator = '';\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2])\n    this.semver = ANY;\n  else\n    this.semver = new SemVer(m[2], this.loose);\n};\n\nComparator.prototype.inspect = function() {\n  return '<SemVer Comparator \"' + this + '\">';\n};\n\nComparator.prototype.toString = function() {\n  return this.value;\n};\n\nComparator.prototype.test = function(version) {\n  ;\n\n  if (this.semver === ANY)\n    return true;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  return cmp(version, this.operator, this.semver, this.loose);\n};\n\n\nexports.Range = Range;\nfunction Range(range, loose) {\n  if ((range instanceof Range) && range.loose === loose)\n    return range;\n\n  if (!(this instanceof Range))\n    return new Range(range, loose);\n\n  this.loose = loose;\n\n  // First, split based on boolean or ||\n  this.raw = range;\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\n    return this.parseRange(range.trim());\n  }, this).filter(function(c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length;\n  });\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range);\n  }\n\n  this.format();\n}\n\nRange.prototype.inspect = function() {\n  return '<SemVer Range \"' + this.range + '\">';\n};\n\nRange.prototype.format = function() {\n  this.range = this.set.map(function(comps) {\n    return comps.join(' ').trim();\n  }).join('||').trim();\n  return this.range;\n};\n\nRange.prototype.toString = function() {\n  return this.range;\n};\n\nRange.prototype.parseRange = function(range) {\n  var loose = this.loose;\n  range = range.trim();\n  ;\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\n  range = range.replace(hr, hyphenReplace);\n  ;\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\n  ;\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace);\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ');\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var set = range.split(' ').map(function(comp) {\n    return parseComparator(comp, loose);\n  }).join(' ').split(/\\s+/);\n  if (this.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function(comp) {\n      return !!comp.match(compRe);\n    });\n  }\n  set = set.map(function(comp) {\n    return new Comparator(comp, loose);\n  });\n\n  return set;\n};\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators;\nfunction toComparators(range, loose) {\n  return new Range(range, loose).set.map(function(comp) {\n    return comp.map(function(c) {\n      return c.value;\n    }).join(' ').trim().split(' ');\n  });\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator(comp, loose) {\n  ;\n  comp = replaceCarets(comp, loose);\n  ;\n  comp = replaceTildes(comp, loose);\n  ;\n  comp = replaceXRanges(comp, loose);\n  ;\n  comp = replaceStars(comp, loose);\n  ;\n  return comp;\n}\n\nfunction isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceTilde(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceTilde(comp, loose) {\n  var r = loose ? re[TILDELOOSE] : re[TILDE];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    ;\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p))\n      // ~1.2 == >=1.2.0- <1.3.0-\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    else if (pr) {\n      ;\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      ret = '>=' + M + '.' + m + '.' + p + pr +\n            ' <' + M + '.' + (+m + 1) + '.0';\n    } else\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0';\n\n    ;\n    return ret;\n  });\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceCaret(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceCaret(comp, loose) {\n  ;\n  var r = loose ? re[CARETLOOSE] : re[CARET];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    ;\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p)) {\n      if (M === '0')\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      else\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n    } else if (pr) {\n      ;\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p + pr +\n              ' <' + (+M + 1) + '.0.0';\n    } else {\n      ;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0';\n    }\n\n    ;\n    return ret;\n  });\n}\n\nfunction replaceXRanges(comp, loose) {\n  ;\n  return comp.split(/\\s+/).map(function(comp) {\n    return replaceXRange(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceXRange(comp, loose) {\n  comp = comp.trim();\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\n    ;\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX)\n      gtlt = '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // replace X with 0\n      if (xm)\n        m = 0;\n      if (xp)\n        p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else if (xp) {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm)\n          M = +M + 1\n        else\n          m = +m + 1\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p;\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    }\n\n    ;\n\n    return ret;\n  });\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars(comp, loose) {\n  ;\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '');\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace($0,\n                       from, fM, fm, fp, fpr, fb,\n                       to, tM, tm, tp, tpr, tb) {\n\n  if (isX(fM))\n    from = '';\n  else if (isX(fm))\n    from = '>=' + fM + '.0.0';\n  else if (isX(fp))\n    from = '>=' + fM + '.' + fm + '.0';\n  else\n    from = '>=' + from;\n\n  if (isX(tM))\n    to = '';\n  else if (isX(tm))\n    to = '<' + (+tM + 1) + '.0.0';\n  else if (isX(tp))\n    to = '<' + tM + '.' + (+tm + 1) + '.0';\n  else if (tpr)\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n  else\n    to = '<=' + to;\n\n  return (from + ' ' + to).trim();\n}\n\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function(version) {\n  if (!version)\n    return false;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version))\n      return true;\n  }\n  return false;\n};\n\nfunction testSet(set, version) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version))\n      return false;\n  }\n\n  if (version.prerelease.length) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var i = 0; i < set.length; i++) {\n      ;\n      if (set[i].semver === ANY)\n        return true;\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver;\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch)\n          return true;\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n\n  return true;\n}\n\nexports.satisfies = satisfies;\nfunction satisfies(version, range, loose) {\n  try {\n    range = new Range(range, loose);\n  } catch (er) {\n    return false;\n  }\n  return range.test(version);\n}\n\nexports.maxSatisfying = maxSatisfying;\nfunction maxSatisfying(versions, range, loose) {\n  return versions.filter(function(version) {\n    return satisfies(version, range, loose);\n  }).sort(function(a, b) {\n    return rcompare(a, b, loose);\n  })[0] || null;\n}\n\nexports.validRange = validRange;\nfunction validRange(range, loose) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, loose).range || '*';\n  } catch (er) {\n    return null;\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr;\nfunction ltr(version, range, loose) {\n  return outside(version, range, '<', loose);\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr;\nfunction gtr(version, range, loose) {\n  return outside(version, range, '>', loose);\n}\n\nexports.outside = outside;\nfunction outside(version, range, hilo, loose) {\n  version = new SemVer(version, loose);\n  range = new Range(range, loose);\n\n  var gtfn, ltefn, ltfn, comp, ecomp;\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, loose)) {\n    return false;\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n\n    var high = null;\n    var low = null;\n\n    comparators.forEach(function(comparator) {\n      high = high || comparator;\n      low = low || comparator;\n      if (gtfn(comparator.semver, high.semver, loose)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, loose)) {\n        low = comparator;\n      }\n    });\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Use the define() function if we're in AMD land\nif (typeof define === 'function' && define.amd)\n  define(exports);\n\n})(\n  typeof exports === 'object' ? exports :\n  typeof define === 'function' && define.amd ? {} :\n  semver = {}\n);\n"],"sourceRoot":"/source/"}