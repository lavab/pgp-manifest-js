{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index.js","pgp-manifest.js","node_modules/semver/semver.browser.js"],"names":[],"mappings":"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","file":"pgp-manifest.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\r\n\r\nvar semver = require(\"semver\");\r\n\r\nexports.valid = function(manifest) {\r\n\t// Check if version is here\r\n\tif (!semver.valid(manifest.version)) {\r\n\t\tconsole.log(\"#1\");\r\n\t\treturn false;\r\n\t} \r\n\r\n\t// Check parts contents\r\n\tif (!manifest.parts || manifest.parts.length === 0) {\r\n\t\tconsole.log(\"#2\");\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Check if body is there and verify part contents\r\n\tlet foundBody;\r\n\r\n\tfor (let part of manifest.parts) {\r\n\t\tif (!part.id || !part.hash || !part[\"content-type\"]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (part.id === \"body\") {\r\n\t\t\tfoundBody = true;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!foundBody) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nexports.parse = function(input) {\r\n\t// Parse the manifest\r\n\tlet manifest = JSON.parse(input);\r\n\r\n\t// Validate the manifest\r\n\tif (!exports.valid(manifest)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn manifest;\r\n}\r\n\r\nexports.write = function(manifest) {\r\n\t// Validate the manifest\r\n\tif (!exports.valid(manifest)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Stringify it\r\n\treturn JSON.stringify(manifest);\r\n}","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\r\n\r\nvar semver = require(\"semver\");\r\n\r\nexports.valid = function(manifest) {\r\n\t// Check if version is here\r\n\tif (!semver.valid(manifest.version)) {\r\n\t\tconsole.log(\"#1\");\r\n\t\treturn false;\r\n\t} \r\n\r\n\t// Check parts contents\r\n\tif (!manifest.parts || manifest.parts.length === 0) {\r\n\t\tconsole.log(\"#2\");\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Check if body is there and verify part contents\r\n\tlet foundBody;\r\n\r\n\tfor (let part of manifest.parts) {\r\n\t\tif (!part.id || !part.hash || !part[\"content-type\"]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (part.id === \"body\") {\r\n\t\t\tfoundBody = true;\r\n\t\t}\r\n\t}\r\n\r\n\tif (!foundBody) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nexports.parse = function(input) {\r\n\t// Parse the manifest\r\n\tlet manifest = JSON.parse(input);\r\n\r\n\t// Validate the manifest\r\n\tif (!exports.valid(manifest)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn manifest;\r\n}\r\n\r\nexports.write = function(manifest) {\r\n\t// Validate the manifest\r\n\tif (!exports.valid(manifest)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Stringify it\r\n\treturn JSON.stringify(manifest);\r\n}\n},{\"semver\":2}],2:[function(require,module,exports){\n;(function(exports) {\n\n// export the class if we are in a Node-like system.\nif (typeof module === 'object' && module.exports === exports)\n  exports = module.exports = SemVer;\n\n// The debug function is excluded entirely from the minified version.\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0';\n\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar R = 0;\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++;\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\nvar NUMERICIDENTIFIERLOOSE = R++;\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\n\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++;\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\n\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++;\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')';\n\nvar MAINVERSIONLOOSE = R++;\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++;\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';\n\nvar PRERELEASEIDENTIFIERLOOSE = R++;\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';\n\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++;\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\n\nvar PRERELEASELOOSE = R++;\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++;\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++;\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\n\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++;\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?';\n\nsrc[FULL] = '^' + FULLPLAIN + '$';\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?';\n\nvar LOOSE = R++;\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';\n\nvar GTLT = R++;\nsrc[GTLT] = '((?:<|>)?=?)';\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++;\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\nvar XRANGEIDENTIFIER = R++;\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\n\nvar XRANGEPLAIN = R++;\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?';\n\nvar XRANGEPLAINLOOSE = R++;\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?';\n\nvar XRANGE = R++;\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\nvar XRANGELOOSE = R++;\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++;\nsrc[LONETILDE] = '(?:~>?)';\n\nvar TILDETRIM = R++;\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\nvar tildeTrimReplace = '$1~';\n\nvar TILDE = R++;\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\nvar TILDELOOSE = R++;\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++;\nsrc[LONECARET] = '(?:\\\\^)';\n\nvar CARETTRIM = R++;\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\nvar caretTrimReplace = '$1^';\n\nvar CARET = R++;\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\nvar CARETLOOSE = R++;\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++;\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\nvar COMPARATOR = R++;\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\n\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++;\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\nvar comparatorTrimReplace = '$1$2$3';\n\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++;\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$';\n\nvar HYPHENRANGELOOSE = R++;\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$';\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++;\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  ;\n  if (!re[i])\n    re[i] = new RegExp(src[i]);\n}\n\nexports.parse = parse;\nfunction parse(version, loose) {\n  var r = loose ? re[LOOSE] : re[FULL];\n  return (r.test(version)) ? new SemVer(version, loose) : null;\n}\n\nexports.valid = valid;\nfunction valid(version, loose) {\n  var v = parse(version, loose);\n  return v ? v.version : null;\n}\n\n\nexports.clean = clean;\nfunction clean(version, loose) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);\n  return s ? s.version : null;\n}\n\nexports.SemVer = SemVer;\n\nfunction SemVer(version, loose) {\n  if (version instanceof SemVer) {\n    if (version.loose === loose)\n      return version;\n    else\n      version = version.version;\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  if (!(this instanceof SemVer))\n    return new SemVer(version, loose);\n\n  ;\n  this.loose = loose;\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\n\n  if (!m)\n    throw new TypeError('Invalid Version: ' + version);\n\n  this.raw = version;\n\n  // these are actually numbers\n  this.major = +m[1];\n  this.minor = +m[2];\n  this.patch = +m[3];\n\n  // numberify any prerelease numeric ids\n  if (!m[4])\n    this.prerelease = [];\n  else\n    this.prerelease = m[4].split('.').map(function(id) {\n      return (/^[0-9]+$/.test(id)) ? +id : id;\n    });\n\n  this.build = m[5] ? m[5].split('.') : [];\n  this.format();\n}\n\nSemVer.prototype.format = function() {\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\n  if (this.prerelease.length)\n    this.version += '-' + this.prerelease.join('.');\n  return this.version;\n};\n\nSemVer.prototype.inspect = function() {\n  return '<SemVer \"' + this + '\">';\n};\n\nSemVer.prototype.toString = function() {\n  return this.version;\n};\n\nSemVer.prototype.compare = function(other) {\n  ;\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return this.compareMain(other) || this.comparePre(other);\n};\n\nSemVer.prototype.compareMain = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch);\n};\n\nSemVer.prototype.comparePre = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length)\n    return -1;\n  else if (!this.prerelease.length && other.prerelease.length)\n    return 1;\n  else if (!this.prerelease.length && !other.prerelease.length)\n    return 0;\n\n  var i = 0;\n  do {\n    var a = this.prerelease[i];\n    var b = other.prerelease[i];\n    ;\n    if (a === undefined && b === undefined)\n      return 0;\n    else if (b === undefined)\n      return 1;\n    else if (a === undefined)\n      return -1;\n    else if (a === b)\n      continue;\n    else\n      return compareIdentifiers(a, b);\n  } while (++i);\n};\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function(release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor = 0;\n      this.major++;\n      this.inc('pre', identifier);\n      break;\n    case 'preminor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor++;\n      this.inc('pre', identifier);\n      break;\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0;\n      this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0)\n        this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)\n        this.major++;\n      this.minor = 0;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0)\n        this.minor++;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0)\n        this.patch++;\n      this.prerelease = [];\n      break;\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0)\n        this.prerelease = [0];\n      else {\n        var i = this.prerelease.length;\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++;\n            i = -2;\n          }\n        }\n        if (i === -1) // didn't increment anything\n          this.prerelease.push(0);\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1]))\n            this.prerelease = [identifier, 0];\n        } else\n          this.prerelease = [identifier, 0];\n      }\n      break;\n\n    default:\n      throw new Error('invalid increment argument: ' + release);\n  }\n  this.format();\n  return this;\n};\n\nexports.inc = inc;\nfunction inc(version, release, loose, identifier) {\n  if (typeof(loose) === 'string') {\n    identifier = loose;\n    loose = undefined;\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version;\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.diff = diff;\nfunction diff(version1, version2) {\n  if (eq(version1, version2)) {\n    return null;\n  } else {\n    var v1 = parse(version1);\n    var v2 = parse(version2);\n    if (v1.prerelease.length || v2.prerelease.length) {\n      for (var key in v1) {\n        if (key === 'major' || key === 'minor' || key === 'patch') {\n          if (v1[key] !== v2[key]) {\n            return 'pre'+key;\n          }\n        }\n      }\n      return 'prerelease';\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return key;\n        }\n      }\n    }\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers;\n\nvar numeric = /^[0-9]+$/;\nfunction compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return (anum && !bnum) ? -1 :\n         (bnum && !anum) ? 1 :\n         a < b ? -1 :\n         a > b ? 1 :\n         0;\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers;\nfunction rcompareIdentifiers(a, b) {\n  return compareIdentifiers(b, a);\n}\n\nexports.major = major;\nfunction major(a, loose) {\n  return new SemVer(a, loose).major;\n}\n\nexports.minor = minor;\nfunction minor(a, loose) {\n  return new SemVer(a, loose).minor;\n}\n\nexports.patch = patch;\nfunction patch(a, loose) {\n  return new SemVer(a, loose).patch;\n}\n\nexports.compare = compare;\nfunction compare(a, b, loose) {\n  return new SemVer(a, loose).compare(b);\n}\n\nexports.compareLoose = compareLoose;\nfunction compareLoose(a, b) {\n  return compare(a, b, true);\n}\n\nexports.rcompare = rcompare;\nfunction rcompare(a, b, loose) {\n  return compare(b, a, loose);\n}\n\nexports.sort = sort;\nfunction sort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.compare(a, b, loose);\n  });\n}\n\nexports.rsort = rsort;\nfunction rsort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.rcompare(a, b, loose);\n  });\n}\n\nexports.gt = gt;\nfunction gt(a, b, loose) {\n  return compare(a, b, loose) > 0;\n}\n\nexports.lt = lt;\nfunction lt(a, b, loose) {\n  return compare(a, b, loose) < 0;\n}\n\nexports.eq = eq;\nfunction eq(a, b, loose) {\n  return compare(a, b, loose) === 0;\n}\n\nexports.neq = neq;\nfunction neq(a, b, loose) {\n  return compare(a, b, loose) !== 0;\n}\n\nexports.gte = gte;\nfunction gte(a, b, loose) {\n  return compare(a, b, loose) >= 0;\n}\n\nexports.lte = lte;\nfunction lte(a, b, loose) {\n  return compare(a, b, loose) <= 0;\n}\n\nexports.cmp = cmp;\nfunction cmp(a, op, b, loose) {\n  var ret;\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a === b;\n      break;\n    case '!==':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a !== b;\n      break;\n    case '': case '=': case '==': ret = eq(a, b, loose); break;\n    case '!=': ret = neq(a, b, loose); break;\n    case '>': ret = gt(a, b, loose); break;\n    case '>=': ret = gte(a, b, loose); break;\n    case '<': ret = lt(a, b, loose); break;\n    case '<=': ret = lte(a, b, loose); break;\n    default: throw new TypeError('Invalid operator: ' + op);\n  }\n  return ret;\n}\n\nexports.Comparator = Comparator;\nfunction Comparator(comp, loose) {\n  if (comp instanceof Comparator) {\n    if (comp.loose === loose)\n      return comp;\n    else\n      comp = comp.value;\n  }\n\n  if (!(this instanceof Comparator))\n    return new Comparator(comp, loose);\n\n  ;\n  this.loose = loose;\n  this.parse(comp);\n\n  if (this.semver === ANY)\n    this.value = '';\n  else\n    this.value = this.operator + this.semver.version;\n\n  ;\n}\n\nvar ANY = {};\nComparator.prototype.parse = function(comp) {\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var m = comp.match(r);\n\n  if (!m)\n    throw new TypeError('Invalid comparator: ' + comp);\n\n  this.operator = m[1];\n  if (this.operator === '=')\n    this.operator = '';\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2])\n    this.semver = ANY;\n  else\n    this.semver = new SemVer(m[2], this.loose);\n};\n\nComparator.prototype.inspect = function() {\n  return '<SemVer Comparator \"' + this + '\">';\n};\n\nComparator.prototype.toString = function() {\n  return this.value;\n};\n\nComparator.prototype.test = function(version) {\n  ;\n\n  if (this.semver === ANY)\n    return true;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  return cmp(version, this.operator, this.semver, this.loose);\n};\n\n\nexports.Range = Range;\nfunction Range(range, loose) {\n  if ((range instanceof Range) && range.loose === loose)\n    return range;\n\n  if (!(this instanceof Range))\n    return new Range(range, loose);\n\n  this.loose = loose;\n\n  // First, split based on boolean or ||\n  this.raw = range;\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\n    return this.parseRange(range.trim());\n  }, this).filter(function(c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length;\n  });\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range);\n  }\n\n  this.format();\n}\n\nRange.prototype.inspect = function() {\n  return '<SemVer Range \"' + this.range + '\">';\n};\n\nRange.prototype.format = function() {\n  this.range = this.set.map(function(comps) {\n    return comps.join(' ').trim();\n  }).join('||').trim();\n  return this.range;\n};\n\nRange.prototype.toString = function() {\n  return this.range;\n};\n\nRange.prototype.parseRange = function(range) {\n  var loose = this.loose;\n  range = range.trim();\n  ;\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\n  range = range.replace(hr, hyphenReplace);\n  ;\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\n  ;\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace);\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ');\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var set = range.split(' ').map(function(comp) {\n    return parseComparator(comp, loose);\n  }).join(' ').split(/\\s+/);\n  if (this.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function(comp) {\n      return !!comp.match(compRe);\n    });\n  }\n  set = set.map(function(comp) {\n    return new Comparator(comp, loose);\n  });\n\n  return set;\n};\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators;\nfunction toComparators(range, loose) {\n  return new Range(range, loose).set.map(function(comp) {\n    return comp.map(function(c) {\n      return c.value;\n    }).join(' ').trim().split(' ');\n  });\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator(comp, loose) {\n  ;\n  comp = replaceCarets(comp, loose);\n  ;\n  comp = replaceTildes(comp, loose);\n  ;\n  comp = replaceXRanges(comp, loose);\n  ;\n  comp = replaceStars(comp, loose);\n  ;\n  return comp;\n}\n\nfunction isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceTilde(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceTilde(comp, loose) {\n  var r = loose ? re[TILDELOOSE] : re[TILDE];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    ;\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p))\n      // ~1.2 == >=1.2.0- <1.3.0-\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    else if (pr) {\n      ;\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      ret = '>=' + M + '.' + m + '.' + p + pr +\n            ' <' + M + '.' + (+m + 1) + '.0';\n    } else\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0';\n\n    ;\n    return ret;\n  });\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceCaret(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceCaret(comp, loose) {\n  ;\n  var r = loose ? re[CARETLOOSE] : re[CARET];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    ;\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p)) {\n      if (M === '0')\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      else\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n    } else if (pr) {\n      ;\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p + pr +\n              ' <' + (+M + 1) + '.0.0';\n    } else {\n      ;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0';\n    }\n\n    ;\n    return ret;\n  });\n}\n\nfunction replaceXRanges(comp, loose) {\n  ;\n  return comp.split(/\\s+/).map(function(comp) {\n    return replaceXRange(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceXRange(comp, loose) {\n  comp = comp.trim();\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\n    ;\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX)\n      gtlt = '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // replace X with 0\n      if (xm)\n        m = 0;\n      if (xp)\n        p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else if (xp) {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm)\n          M = +M + 1\n        else\n          m = +m + 1\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p;\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    }\n\n    ;\n\n    return ret;\n  });\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars(comp, loose) {\n  ;\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '');\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace($0,\n                       from, fM, fm, fp, fpr, fb,\n                       to, tM, tm, tp, tpr, tb) {\n\n  if (isX(fM))\n    from = '';\n  else if (isX(fm))\n    from = '>=' + fM + '.0.0';\n  else if (isX(fp))\n    from = '>=' + fM + '.' + fm + '.0';\n  else\n    from = '>=' + from;\n\n  if (isX(tM))\n    to = '';\n  else if (isX(tm))\n    to = '<' + (+tM + 1) + '.0.0';\n  else if (isX(tp))\n    to = '<' + tM + '.' + (+tm + 1) + '.0';\n  else if (tpr)\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n  else\n    to = '<=' + to;\n\n  return (from + ' ' + to).trim();\n}\n\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function(version) {\n  if (!version)\n    return false;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version))\n      return true;\n  }\n  return false;\n};\n\nfunction testSet(set, version) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version))\n      return false;\n  }\n\n  if (version.prerelease.length) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var i = 0; i < set.length; i++) {\n      ;\n      if (set[i].semver === ANY)\n        return true;\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver;\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch)\n          return true;\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n\n  return true;\n}\n\nexports.satisfies = satisfies;\nfunction satisfies(version, range, loose) {\n  try {\n    range = new Range(range, loose);\n  } catch (er) {\n    return false;\n  }\n  return range.test(version);\n}\n\nexports.maxSatisfying = maxSatisfying;\nfunction maxSatisfying(versions, range, loose) {\n  return versions.filter(function(version) {\n    return satisfies(version, range, loose);\n  }).sort(function(a, b) {\n    return rcompare(a, b, loose);\n  })[0] || null;\n}\n\nexports.validRange = validRange;\nfunction validRange(range, loose) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, loose).range || '*';\n  } catch (er) {\n    return null;\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr;\nfunction ltr(version, range, loose) {\n  return outside(version, range, '<', loose);\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr;\nfunction gtr(version, range, loose) {\n  return outside(version, range, '>', loose);\n}\n\nexports.outside = outside;\nfunction outside(version, range, hilo, loose) {\n  version = new SemVer(version, loose);\n  range = new Range(range, loose);\n\n  var gtfn, ltefn, ltfn, comp, ecomp;\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, loose)) {\n    return false;\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n\n    var high = null;\n    var low = null;\n\n    comparators.forEach(function(comparator) {\n      high = high || comparator;\n      low = low || comparator;\n      if (gtfn(comparator.semver, high.semver, loose)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, loose)) {\n        low = comparator;\n      }\n    });\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Use the define() function if we're in AMD land\nif (typeof define === 'function' && define.amd)\n  define(exports);\n\n})(\n  typeof exports === 'object' ? exports :\n  typeof define === 'function' && define.amd ? {} :\n  semver = {}\n);\n\n},{}]},{},[1])\n\n",";(function(exports) {\n\n// export the class if we are in a Node-like system.\nif (typeof module === 'object' && module.exports === exports)\n  exports = module.exports = SemVer;\n\n// The debug function is excluded entirely from the minified version.\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = '2.0.0';\n\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar src = exports.src = [];\nvar R = 0;\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\nvar NUMERICIDENTIFIER = R++;\nsrc[NUMERICIDENTIFIER] = '0|[1-9]\\\\d*';\nvar NUMERICIDENTIFIERLOOSE = R++;\nsrc[NUMERICIDENTIFIERLOOSE] = '[0-9]+';\n\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\nvar NONNUMERICIDENTIFIER = R++;\nsrc[NONNUMERICIDENTIFIER] = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\n\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\nvar MAINVERSION = R++;\nsrc[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')\\\\.' +\n                   '(' + src[NUMERICIDENTIFIER] + ')';\n\nvar MAINVERSIONLOOSE = R++;\nsrc[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\\\.' +\n                        '(' + src[NUMERICIDENTIFIERLOOSE] + ')';\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\nvar PRERELEASEIDENTIFIER = R++;\nsrc[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +\n                            '|' + src[NONNUMERICIDENTIFIER] + ')';\n\nvar PRERELEASEIDENTIFIERLOOSE = R++;\nsrc[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +\n                                 '|' + src[NONNUMERICIDENTIFIER] + ')';\n\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\nvar PRERELEASE = R++;\nsrc[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +\n                  '(?:\\\\.' + src[PRERELEASEIDENTIFIER] + ')*))';\n\nvar PRERELEASELOOSE = R++;\nsrc[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +\n                       '(?:\\\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\nvar BUILDIDENTIFIER = R++;\nsrc[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\nvar BUILD = R++;\nsrc[BUILD] = '(?:\\\\+(' + src[BUILDIDENTIFIER] +\n             '(?:\\\\.' + src[BUILDIDENTIFIER] + ')*))';\n\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\nvar FULL = R++;\nvar FULLPLAIN = 'v?' + src[MAINVERSION] +\n                src[PRERELEASE] + '?' +\n                src[BUILD] + '?';\n\nsrc[FULL] = '^' + FULLPLAIN + '$';\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = '[v=\\\\s]*' + src[MAINVERSIONLOOSE] +\n                 src[PRERELEASELOOSE] + '?' +\n                 src[BUILD] + '?';\n\nvar LOOSE = R++;\nsrc[LOOSE] = '^' + LOOSEPLAIN + '$';\n\nvar GTLT = R++;\nsrc[GTLT] = '((?:<|>)?=?)';\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++;\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\\\*';\nvar XRANGEIDENTIFIER = R++;\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\\\*';\n\nvar XRANGEPLAIN = R++;\nsrc[XRANGEPLAIN] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:\\\\.(' + src[XRANGEIDENTIFIER] + ')' +\n                   '(?:' + src[PRERELEASE] + ')?' +\n                   src[BUILD] + '?' +\n                   ')?)?';\n\nvar XRANGEPLAINLOOSE = R++;\nsrc[XRANGEPLAINLOOSE] = '[v=\\\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:\\\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +\n                        '(?:' + src[PRERELEASELOOSE] + ')?' +\n                        src[BUILD] + '?' +\n                        ')?)?';\n\nvar XRANGE = R++;\nsrc[XRANGE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAIN] + '$';\nvar XRANGELOOSE = R++;\nsrc[XRANGELOOSE] = '^' + src[GTLT] + '\\\\s*' + src[XRANGEPLAINLOOSE] + '$';\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++;\nsrc[LONETILDE] = '(?:~>?)';\n\nvar TILDETRIM = R++;\nsrc[TILDETRIM] = '(\\\\s*)' + src[LONETILDE] + '\\\\s+';\nre[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');\nvar tildeTrimReplace = '$1~';\n\nvar TILDE = R++;\nsrc[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';\nvar TILDELOOSE = R++;\nsrc[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++;\nsrc[LONECARET] = '(?:\\\\^)';\n\nvar CARETTRIM = R++;\nsrc[CARETTRIM] = '(\\\\s*)' + src[LONECARET] + '\\\\s+';\nre[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');\nvar caretTrimReplace = '$1^';\n\nvar CARET = R++;\nsrc[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';\nvar CARETLOOSE = R++;\nsrc[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++;\nsrc[COMPARATORLOOSE] = '^' + src[GTLT] + '\\\\s*(' + LOOSEPLAIN + ')$|^$';\nvar COMPARATOR = R++;\nsrc[COMPARATOR] = '^' + src[GTLT] + '\\\\s*(' + FULLPLAIN + ')$|^$';\n\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++;\nsrc[COMPARATORTRIM] = '(\\\\s*)' + src[GTLT] +\n                      '\\\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';\n\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');\nvar comparatorTrimReplace = '$1$2$3';\n\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++;\nsrc[HYPHENRANGE] = '^\\\\s*(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s+-\\\\s+' +\n                   '(' + src[XRANGEPLAIN] + ')' +\n                   '\\\\s*$';\n\nvar HYPHENRANGELOOSE = R++;\nsrc[HYPHENRANGELOOSE] = '^\\\\s*(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s+-\\\\s+' +\n                        '(' + src[XRANGEPLAINLOOSE] + ')' +\n                        '\\\\s*$';\n\n// Star ranges basically just allow anything at all.\nvar STAR = R++;\nsrc[STAR] = '(<|>)?=?\\\\s*\\\\*';\n\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor (var i = 0; i < R; i++) {\n  ;\n  if (!re[i])\n    re[i] = new RegExp(src[i]);\n}\n\nexports.parse = parse;\nfunction parse(version, loose) {\n  var r = loose ? re[LOOSE] : re[FULL];\n  return (r.test(version)) ? new SemVer(version, loose) : null;\n}\n\nexports.valid = valid;\nfunction valid(version, loose) {\n  var v = parse(version, loose);\n  return v ? v.version : null;\n}\n\n\nexports.clean = clean;\nfunction clean(version, loose) {\n  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);\n  return s ? s.version : null;\n}\n\nexports.SemVer = SemVer;\n\nfunction SemVer(version, loose) {\n  if (version instanceof SemVer) {\n    if (version.loose === loose)\n      return version;\n    else\n      version = version.version;\n  } else if (typeof version !== 'string') {\n    throw new TypeError('Invalid Version: ' + version);\n  }\n\n  if (!(this instanceof SemVer))\n    return new SemVer(version, loose);\n\n  ;\n  this.loose = loose;\n  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);\n\n  if (!m)\n    throw new TypeError('Invalid Version: ' + version);\n\n  this.raw = version;\n\n  // these are actually numbers\n  this.major = +m[1];\n  this.minor = +m[2];\n  this.patch = +m[3];\n\n  // numberify any prerelease numeric ids\n  if (!m[4])\n    this.prerelease = [];\n  else\n    this.prerelease = m[4].split('.').map(function(id) {\n      return (/^[0-9]+$/.test(id)) ? +id : id;\n    });\n\n  this.build = m[5] ? m[5].split('.') : [];\n  this.format();\n}\n\nSemVer.prototype.format = function() {\n  this.version = this.major + '.' + this.minor + '.' + this.patch;\n  if (this.prerelease.length)\n    this.version += '-' + this.prerelease.join('.');\n  return this.version;\n};\n\nSemVer.prototype.inspect = function() {\n  return '<SemVer \"' + this + '\">';\n};\n\nSemVer.prototype.toString = function() {\n  return this.version;\n};\n\nSemVer.prototype.compare = function(other) {\n  ;\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return this.compareMain(other) || this.comparePre(other);\n};\n\nSemVer.prototype.compareMain = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  return compareIdentifiers(this.major, other.major) ||\n         compareIdentifiers(this.minor, other.minor) ||\n         compareIdentifiers(this.patch, other.patch);\n};\n\nSemVer.prototype.comparePre = function(other) {\n  if (!(other instanceof SemVer))\n    other = new SemVer(other, this.loose);\n\n  // NOT having a prerelease is > having one\n  if (this.prerelease.length && !other.prerelease.length)\n    return -1;\n  else if (!this.prerelease.length && other.prerelease.length)\n    return 1;\n  else if (!this.prerelease.length && !other.prerelease.length)\n    return 0;\n\n  var i = 0;\n  do {\n    var a = this.prerelease[i];\n    var b = other.prerelease[i];\n    ;\n    if (a === undefined && b === undefined)\n      return 0;\n    else if (b === undefined)\n      return 1;\n    else if (a === undefined)\n      return -1;\n    else if (a === b)\n      continue;\n    else\n      return compareIdentifiers(a, b);\n  } while (++i);\n};\n\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function(release, identifier) {\n  switch (release) {\n    case 'premajor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor = 0;\n      this.major++;\n      this.inc('pre', identifier);\n      break;\n    case 'preminor':\n      this.prerelease.length = 0;\n      this.patch = 0;\n      this.minor++;\n      this.inc('pre', identifier);\n      break;\n    case 'prepatch':\n      // If this is already a prerelease, it will bump to the next version\n      // drop any prereleases that might already exist, since they are not\n      // relevant at this point.\n      this.prerelease.length = 0;\n      this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n    // If the input is a non-prerelease version, this acts the same as\n    // prepatch.\n    case 'prerelease':\n      if (this.prerelease.length === 0)\n        this.inc('patch', identifier);\n      this.inc('pre', identifier);\n      break;\n\n    case 'major':\n      // If this is a pre-major version, bump up to the same major version.\n      // Otherwise increment major.\n      // 1.0.0-5 bumps to 1.0.0\n      // 1.1.0 bumps to 2.0.0\n      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0)\n        this.major++;\n      this.minor = 0;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'minor':\n      // If this is a pre-minor version, bump up to the same minor version.\n      // Otherwise increment minor.\n      // 1.2.0-5 bumps to 1.2.0\n      // 1.2.1 bumps to 1.3.0\n      if (this.patch !== 0 || this.prerelease.length === 0)\n        this.minor++;\n      this.patch = 0;\n      this.prerelease = [];\n      break;\n    case 'patch':\n      // If this is not a pre-release version, it will increment the patch.\n      // If it is a pre-release it will bump up to the same patch version.\n      // 1.2.0-5 patches to 1.2.0\n      // 1.2.0 patches to 1.2.1\n      if (this.prerelease.length === 0)\n        this.patch++;\n      this.prerelease = [];\n      break;\n    // This probably shouldn't be used publicly.\n    // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n    case 'pre':\n      if (this.prerelease.length === 0)\n        this.prerelease = [0];\n      else {\n        var i = this.prerelease.length;\n        while (--i >= 0) {\n          if (typeof this.prerelease[i] === 'number') {\n            this.prerelease[i]++;\n            i = -2;\n          }\n        }\n        if (i === -1) // didn't increment anything\n          this.prerelease.push(0);\n      }\n      if (identifier) {\n        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n        if (this.prerelease[0] === identifier) {\n          if (isNaN(this.prerelease[1]))\n            this.prerelease = [identifier, 0];\n        } else\n          this.prerelease = [identifier, 0];\n      }\n      break;\n\n    default:\n      throw new Error('invalid increment argument: ' + release);\n  }\n  this.format();\n  return this;\n};\n\nexports.inc = inc;\nfunction inc(version, release, loose, identifier) {\n  if (typeof(loose) === 'string') {\n    identifier = loose;\n    loose = undefined;\n  }\n\n  try {\n    return new SemVer(version, loose).inc(release, identifier).version;\n  } catch (er) {\n    return null;\n  }\n}\n\nexports.diff = diff;\nfunction diff(version1, version2) {\n  if (eq(version1, version2)) {\n    return null;\n  } else {\n    var v1 = parse(version1);\n    var v2 = parse(version2);\n    if (v1.prerelease.length || v2.prerelease.length) {\n      for (var key in v1) {\n        if (key === 'major' || key === 'minor' || key === 'patch') {\n          if (v1[key] !== v2[key]) {\n            return 'pre'+key;\n          }\n        }\n      }\n      return 'prerelease';\n    }\n    for (var key in v1) {\n      if (key === 'major' || key === 'minor' || key === 'patch') {\n        if (v1[key] !== v2[key]) {\n          return key;\n        }\n      }\n    }\n  }\n}\n\nexports.compareIdentifiers = compareIdentifiers;\n\nvar numeric = /^[0-9]+$/;\nfunction compareIdentifiers(a, b) {\n  var anum = numeric.test(a);\n  var bnum = numeric.test(b);\n\n  if (anum && bnum) {\n    a = +a;\n    b = +b;\n  }\n\n  return (anum && !bnum) ? -1 :\n         (bnum && !anum) ? 1 :\n         a < b ? -1 :\n         a > b ? 1 :\n         0;\n}\n\nexports.rcompareIdentifiers = rcompareIdentifiers;\nfunction rcompareIdentifiers(a, b) {\n  return compareIdentifiers(b, a);\n}\n\nexports.major = major;\nfunction major(a, loose) {\n  return new SemVer(a, loose).major;\n}\n\nexports.minor = minor;\nfunction minor(a, loose) {\n  return new SemVer(a, loose).minor;\n}\n\nexports.patch = patch;\nfunction patch(a, loose) {\n  return new SemVer(a, loose).patch;\n}\n\nexports.compare = compare;\nfunction compare(a, b, loose) {\n  return new SemVer(a, loose).compare(b);\n}\n\nexports.compareLoose = compareLoose;\nfunction compareLoose(a, b) {\n  return compare(a, b, true);\n}\n\nexports.rcompare = rcompare;\nfunction rcompare(a, b, loose) {\n  return compare(b, a, loose);\n}\n\nexports.sort = sort;\nfunction sort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.compare(a, b, loose);\n  });\n}\n\nexports.rsort = rsort;\nfunction rsort(list, loose) {\n  return list.sort(function(a, b) {\n    return exports.rcompare(a, b, loose);\n  });\n}\n\nexports.gt = gt;\nfunction gt(a, b, loose) {\n  return compare(a, b, loose) > 0;\n}\n\nexports.lt = lt;\nfunction lt(a, b, loose) {\n  return compare(a, b, loose) < 0;\n}\n\nexports.eq = eq;\nfunction eq(a, b, loose) {\n  return compare(a, b, loose) === 0;\n}\n\nexports.neq = neq;\nfunction neq(a, b, loose) {\n  return compare(a, b, loose) !== 0;\n}\n\nexports.gte = gte;\nfunction gte(a, b, loose) {\n  return compare(a, b, loose) >= 0;\n}\n\nexports.lte = lte;\nfunction lte(a, b, loose) {\n  return compare(a, b, loose) <= 0;\n}\n\nexports.cmp = cmp;\nfunction cmp(a, op, b, loose) {\n  var ret;\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a === b;\n      break;\n    case '!==':\n      if (typeof a === 'object') a = a.version;\n      if (typeof b === 'object') b = b.version;\n      ret = a !== b;\n      break;\n    case '': case '=': case '==': ret = eq(a, b, loose); break;\n    case '!=': ret = neq(a, b, loose); break;\n    case '>': ret = gt(a, b, loose); break;\n    case '>=': ret = gte(a, b, loose); break;\n    case '<': ret = lt(a, b, loose); break;\n    case '<=': ret = lte(a, b, loose); break;\n    default: throw new TypeError('Invalid operator: ' + op);\n  }\n  return ret;\n}\n\nexports.Comparator = Comparator;\nfunction Comparator(comp, loose) {\n  if (comp instanceof Comparator) {\n    if (comp.loose === loose)\n      return comp;\n    else\n      comp = comp.value;\n  }\n\n  if (!(this instanceof Comparator))\n    return new Comparator(comp, loose);\n\n  ;\n  this.loose = loose;\n  this.parse(comp);\n\n  if (this.semver === ANY)\n    this.value = '';\n  else\n    this.value = this.operator + this.semver.version;\n\n  ;\n}\n\nvar ANY = {};\nComparator.prototype.parse = function(comp) {\n  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var m = comp.match(r);\n\n  if (!m)\n    throw new TypeError('Invalid comparator: ' + comp);\n\n  this.operator = m[1];\n  if (this.operator === '=')\n    this.operator = '';\n\n  // if it literally is just '>' or '' then allow anything.\n  if (!m[2])\n    this.semver = ANY;\n  else\n    this.semver = new SemVer(m[2], this.loose);\n};\n\nComparator.prototype.inspect = function() {\n  return '<SemVer Comparator \"' + this + '\">';\n};\n\nComparator.prototype.toString = function() {\n  return this.value;\n};\n\nComparator.prototype.test = function(version) {\n  ;\n\n  if (this.semver === ANY)\n    return true;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  return cmp(version, this.operator, this.semver, this.loose);\n};\n\n\nexports.Range = Range;\nfunction Range(range, loose) {\n  if ((range instanceof Range) && range.loose === loose)\n    return range;\n\n  if (!(this instanceof Range))\n    return new Range(range, loose);\n\n  this.loose = loose;\n\n  // First, split based on boolean or ||\n  this.raw = range;\n  this.set = range.split(/\\s*\\|\\|\\s*/).map(function(range) {\n    return this.parseRange(range.trim());\n  }, this).filter(function(c) {\n    // throw out any that are not relevant for whatever reason\n    return c.length;\n  });\n\n  if (!this.set.length) {\n    throw new TypeError('Invalid SemVer Range: ' + range);\n  }\n\n  this.format();\n}\n\nRange.prototype.inspect = function() {\n  return '<SemVer Range \"' + this.range + '\">';\n};\n\nRange.prototype.format = function() {\n  this.range = this.set.map(function(comps) {\n    return comps.join(' ').trim();\n  }).join('||').trim();\n  return this.range;\n};\n\nRange.prototype.toString = function() {\n  return this.range;\n};\n\nRange.prototype.parseRange = function(range) {\n  var loose = this.loose;\n  range = range.trim();\n  ;\n  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];\n  range = range.replace(hr, hyphenReplace);\n  ;\n  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);\n  ;\n\n  // `~ 1.2.3` => `~1.2.3`\n  range = range.replace(re[TILDETRIM], tildeTrimReplace);\n\n  // `^ 1.2.3` => `^1.2.3`\n  range = range.replace(re[CARETTRIM], caretTrimReplace);\n\n  // normalize spaces\n  range = range.split(/\\s+/).join(' ');\n\n  // At this point, the range is completely trimmed and\n  // ready to be split into comparators.\n\n  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];\n  var set = range.split(' ').map(function(comp) {\n    return parseComparator(comp, loose);\n  }).join(' ').split(/\\s+/);\n  if (this.loose) {\n    // in loose mode, throw out any that are not valid comparators\n    set = set.filter(function(comp) {\n      return !!comp.match(compRe);\n    });\n  }\n  set = set.map(function(comp) {\n    return new Comparator(comp, loose);\n  });\n\n  return set;\n};\n\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators;\nfunction toComparators(range, loose) {\n  return new Range(range, loose).set.map(function(comp) {\n    return comp.map(function(c) {\n      return c.value;\n    }).join(' ').trim().split(' ');\n  });\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator(comp, loose) {\n  ;\n  comp = replaceCarets(comp, loose);\n  ;\n  comp = replaceTildes(comp, loose);\n  ;\n  comp = replaceXRanges(comp, loose);\n  ;\n  comp = replaceStars(comp, loose);\n  ;\n  return comp;\n}\n\nfunction isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceTilde(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceTilde(comp, loose) {\n  var r = loose ? re[TILDELOOSE] : re[TILDE];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    ;\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p))\n      // ~1.2 == >=1.2.0- <1.3.0-\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    else if (pr) {\n      ;\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      ret = '>=' + M + '.' + m + '.' + p + pr +\n            ' <' + M + '.' + (+m + 1) + '.0';\n    } else\n      // ~1.2.3 == >=1.2.3 <1.3.0\n      ret = '>=' + M + '.' + m + '.' + p +\n            ' <' + M + '.' + (+m + 1) + '.0';\n\n    ;\n    return ret;\n  });\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets(comp, loose) {\n  return comp.trim().split(/\\s+/).map(function(comp) {\n    return replaceCaret(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceCaret(comp, loose) {\n  ;\n  var r = loose ? re[CARETLOOSE] : re[CARET];\n  return comp.replace(r, function(_, M, m, p, pr) {\n    ;\n    var ret;\n\n    if (isX(M))\n      ret = '';\n    else if (isX(m))\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    else if (isX(p)) {\n      if (M === '0')\n        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n      else\n        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';\n    } else if (pr) {\n      ;\n      if (pr.charAt(0) !== '-')\n        pr = '-' + pr;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p + pr +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p + pr +\n              ' <' + (+M + 1) + '.0.0';\n    } else {\n      ;\n      if (M === '0') {\n        if (m === '0')\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + m + '.' + (+p + 1);\n        else\n          ret = '>=' + M + '.' + m + '.' + p +\n                ' <' + M + '.' + (+m + 1) + '.0';\n      } else\n        ret = '>=' + M + '.' + m + '.' + p +\n              ' <' + (+M + 1) + '.0.0';\n    }\n\n    ;\n    return ret;\n  });\n}\n\nfunction replaceXRanges(comp, loose) {\n  ;\n  return comp.split(/\\s+/).map(function(comp) {\n    return replaceXRange(comp, loose);\n  }).join(' ');\n}\n\nfunction replaceXRange(comp, loose) {\n  comp = comp.trim();\n  var r = loose ? re[XRANGELOOSE] : re[XRANGE];\n  return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\n    ;\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX)\n      gtlt = '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // replace X with 0\n      if (xm)\n        m = 0;\n      if (xp)\n        p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        // >1.2.3 => >= 1.2.4\n        gtlt = '>=';\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else if (xp) {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm)\n          M = +M + 1\n        else\n          m = +m + 1\n      }\n\n      ret = gtlt + M + '.' + m + '.' + p;\n    } else if (xm) {\n      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';\n    } else if (xp) {\n      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';\n    }\n\n    ;\n\n    return ret;\n  });\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars(comp, loose) {\n  ;\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[STAR], '');\n}\n\n// This function is passed to string.replace(re[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace($0,\n                       from, fM, fm, fp, fpr, fb,\n                       to, tM, tm, tp, tpr, tb) {\n\n  if (isX(fM))\n    from = '';\n  else if (isX(fm))\n    from = '>=' + fM + '.0.0';\n  else if (isX(fp))\n    from = '>=' + fM + '.' + fm + '.0';\n  else\n    from = '>=' + from;\n\n  if (isX(tM))\n    to = '';\n  else if (isX(tm))\n    to = '<' + (+tM + 1) + '.0.0';\n  else if (isX(tp))\n    to = '<' + tM + '.' + (+tm + 1) + '.0';\n  else if (tpr)\n    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;\n  else\n    to = '<=' + to;\n\n  return (from + ' ' + to).trim();\n}\n\n\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function(version) {\n  if (!version)\n    return false;\n\n  if (typeof version === 'string')\n    version = new SemVer(version, this.loose);\n\n  for (var i = 0; i < this.set.length; i++) {\n    if (testSet(this.set[i], version))\n      return true;\n  }\n  return false;\n};\n\nfunction testSet(set, version) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version))\n      return false;\n  }\n\n  if (version.prerelease.length) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var i = 0; i < set.length; i++) {\n      ;\n      if (set[i].semver === ANY)\n        return true;\n\n      if (set[i].semver.prerelease.length > 0) {\n        var allowed = set[i].semver;\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch)\n          return true;\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n\n  return true;\n}\n\nexports.satisfies = satisfies;\nfunction satisfies(version, range, loose) {\n  try {\n    range = new Range(range, loose);\n  } catch (er) {\n    return false;\n  }\n  return range.test(version);\n}\n\nexports.maxSatisfying = maxSatisfying;\nfunction maxSatisfying(versions, range, loose) {\n  return versions.filter(function(version) {\n    return satisfies(version, range, loose);\n  }).sort(function(a, b) {\n    return rcompare(a, b, loose);\n  })[0] || null;\n}\n\nexports.validRange = validRange;\nfunction validRange(range, loose) {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, loose).range || '*';\n  } catch (er) {\n    return null;\n  }\n}\n\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr;\nfunction ltr(version, range, loose) {\n  return outside(version, range, '<', loose);\n}\n\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr;\nfunction gtr(version, range, loose) {\n  return outside(version, range, '>', loose);\n}\n\nexports.outside = outside;\nfunction outside(version, range, hilo, loose) {\n  version = new SemVer(version, loose);\n  range = new Range(range, loose);\n\n  var gtfn, ltefn, ltfn, comp, ecomp;\n  switch (hilo) {\n    case '>':\n      gtfn = gt;\n      ltefn = lte;\n      ltfn = lt;\n      comp = '>';\n      ecomp = '>=';\n      break;\n    case '<':\n      gtfn = lt;\n      ltefn = gte;\n      ltfn = gt;\n      comp = '<';\n      ecomp = '<=';\n      break;\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n  }\n\n  // If it satisifes the range it is not outside\n  if (satisfies(version, range, loose)) {\n    return false;\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (var i = 0; i < range.set.length; ++i) {\n    var comparators = range.set[i];\n\n    var high = null;\n    var low = null;\n\n    comparators.forEach(function(comparator) {\n      high = high || comparator;\n      low = low || comparator;\n      if (gtfn(comparator.semver, high.semver, loose)) {\n        high = comparator;\n      } else if (ltfn(comparator.semver, low.semver, loose)) {\n        low = comparator;\n      }\n    });\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false;\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false;\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Use the define() function if we're in AMD land\nif (typeof define === 'function' && define.amd)\n  define(exports);\n\n})(\n  typeof exports === 'object' ? exports :\n  typeof define === 'function' && define.amd ? {} :\n  semver = {}\n);\n"],"sourceRoot":"/source/"}